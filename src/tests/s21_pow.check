#include <check.h>
#include <math.h>

#include "s21_math.h"

#test test_s21_pow
for (double i = -5; i < 5; i++) {
  for (double j = 0; j <= 10; j += 0.1) {
    long double s21_res = s21_pow(i, j);
    long double res = pow(i, j);
    long double eps = pow(10, floor(log10l(fabsl(res))) - 16);
    if (s21_isNan(res) && s21_isNan(s21_res)) {
      ck_assert_int_eq(1, 1);
    } else {
      if (eps < 1e-6) eps = 1e-6;
      ck_assert_ldouble_eq_tol(s21_res, res, eps);
    }
  }
}
ck_assert_ldouble_eq_tol(s21_pow(87.1, -INFINITY), pow(87.1, -INFINITY),
                         S21_EPSILON);
ck_assert_ldouble_eq_tol(s21_pow(0.999, INFINITY), 0, S21_EPSILON);
ck_assert_ldouble_infinite(s21_pow(14.88, INFINITY));
ck_assert_ldouble_eq_tol(s21_pow(-INFINITY, -43), pow(-INFINITY, -43),
                         S21_EPSILON);
ck_assert_ldouble_eq_tol(s21_pow(-43.23, -INFINITY), pow(-43.23, -INFINITY),
                         S21_EPSILON);
ck_assert_ldouble_eq_tol(s21_pow(-INFINITY, -43.23), pow(-INFINITY, -43.23),
                         S21_EPSILON);
